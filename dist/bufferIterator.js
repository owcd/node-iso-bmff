// Generated by CoffeeScript 1.12.2
(function() {
  var BufferIterator, Long;

  Long = require('long');

  module.exports = BufferIterator = (function() {
    function BufferIterator(buffer, offset) {
      if (offset == null) {
        offset = 0;
      }
      this.buffer = buffer;
      this._cursor = offset;
    }

    BufferIterator.prototype.skip = function(bytes) {
      return this._cursor += bytes;
    };

    BufferIterator.prototype.hasMore = function() {
      return this._cursor < this.buffer.length;
    };

    BufferIterator.prototype.remaining = function() {
      return this.buffer.length - this._cursor;
    };

    BufferIterator.prototype.read8 = function() {
      this._cursor += 1;
      return this.buffer.readUInt8(this._cursor - 1);
    };

    BufferIterator.prototype.read16 = function() {
      this._cursor += 2;
      return this.buffer.readUInt16BE(this._cursor - 2);
    };

    BufferIterator.prototype.read32 = function() {
      this._cursor += 4;
      return this.buffer.readUInt32BE(this._cursor - 4);
    };

    BufferIterator.prototype.read64 = function() {
      this._cursor += 8;
      return Long.fromBits(this.buffer.readUInt32BE(this._cursor - 4), this.buffer.readUInt32BE(this._cursor - 8), true);
    };

    BufferIterator.prototype.readString = function(type, length) {
      this._cursor += length;
      return this.buffer.toString(type, this._cursor - length, this._cursor);
    };

    BufferIterator.prototype.readFixedPoint88 = function() {
      return this.read16() / 256;
    };

    BufferIterator.prototype.readFixedPoint1616 = function() {
      return this.read32() / 65536;
    };

    BufferIterator.prototype.readIso639Lang = function() {
      var buffer, i, j, num;
      num = this.read16();
      Buffer(buffer = new Buffer(3));
      for (i = j = 2; j >= 0; i = --j) {
        buffer[2 - i] = ((num >>> (5 * i)) & 0x1F) + 0x60;
      }
      return buffer.toString('utf8');
    };

    BufferIterator.prototype.write8 = function(value) {
      this._cursor += 1;
      this.buffer.writeUInt8(value, this._cursor - 1);
      return this;
    };

    BufferIterator.prototype.write16 = function(value) {
      this._cursor += 2;
      this.buffer.writeUInt16BE(value, this._cursor - 2);
      return this;
    };

    BufferIterator.prototype.write32 = function(value) {
      this._cursor += 4;
      this.buffer.writeUInt32BE(value, this._cursor - 4);
      return this;
    };

    BufferIterator.prototype.write64 = function(value) {
      this._cursor += 8;
      this.buffer.writeUInt32BE(value.getHighBitsUnsigned(), this._cursor - 8);
      this.buffer.writeUInt32BE(value.getLowBitsUnsigned(), this._cursor - 4);
      return this;
    };

    BufferIterator.prototype.writeString = function(value, length) {
      this._cursor += length;
      this.buffer.write(value, this._cursor - length, length);
      return this;
    };

    BufferIterator.prototype.writeFixedPoint88 = function(value) {
      this.write16(value * 256);
      return this;
    };

    BufferIterator.prototype.writeFixedPoint1616 = function(value) {
      this.write32(value * 65536);
      return this;
    };

    BufferIterator.prototype.writeIso639Lang = function(value) {
      var charCode, i, j, num;
      if (value.length !== 3) {
        throw new Error("writeIso639Lang: Invalid language code - " + language);
      }
      num = 0;
      for (i = j = 0; j <= 2; i = ++j) {
        charCode = value.charCodeAt(i) - 0x60;
        if (charCode > 0x1F) {
          throw new Error("writeIso639Lang: Invalid character - " + language[i]);
        }
        num <<= 5;
        num |= charCode;
      }
      this.write16(num);
      return this;
    };

    return BufferIterator;

  })();

}).call(this);
