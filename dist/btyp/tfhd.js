// Generated by CoffeeScript 1.12.2
(function() {
  var BufferIterator, flags, tools;

  tools = require('../tools');

  BufferIterator = require('../bufferIterator');

  flags = {
    'baseDataOffset': 0x01,
    'sampleDescriptionIndex': 0x02,
    'defaultSampleDuration': 0x08,
    'defaultSampleSize': 0x10,
    'defaultSampleFlags': 0x20,
    'durationIsEmpty': 0x10000
  };

  module.exports.decode = function(buffer, offset) {
    var data, flag, iterator, key;
    iterator = new BufferIterator(buffer);
    data = tools.initBoxData(iterator, flags);
    data.trackId = iterator.read32();
    if (data.baseDataOffset) {
      data.baseDataOffset = iterator.read64();
    }
    if (data.sampleDescriptionIndex) {
      data.sampleDescriptionIndex = iterator.read32();
    }
    if (data.defaultSampleDuration) {
      data.defaultSampleDuration = iterator.read32();
    }
    if (data.defaultSampleSize) {
      data.defaultSampleSize = iterator.read32();
    }
    if (data.defaultSampleFlags) {
      data.defaultSampleFlags = iterator.read32();
    }
    for (key in flags) {
      flag = flags[key];
      if (!data[key]) {
        delete data[key];
      }
    }
    return data;
  };

  module.exports.encode = function(data) {
    var iterator, length;
    length = 4;
    if (data.baseDataOffset != null) {
      length += 8;
    }
    if (data.sampleDescriptionIndex != null) {
      length += 4;
    }
    if (data.defaultSampleDuration != null) {
      length += 4;
    }
    if (data.defaultSampleSize != null) {
      length += 4;
    }
    if (data.defaultSampleFlags != null) {
      length += 4;
    }
    iterator = tools.writeBoxData(data, length, flags);
    iterator.write32(data.trackId);
    if (data.baseDataOffset != null) {
      iterator.write64(data.baseDataOffset);
    }
    if (data.sampleDescriptionIndex != null) {
      iterator.write32(data.sampleDescriptionIndex);
    }
    if (data.defaultSampleDuration != null) {
      iterator.write32(data.defaultSampleDuration);
    }
    if (data.defaultSampleSize != null) {
      iterator.write32(data.defaultSampleSize);
    }
    if (data.defaultSampleFlags != null) {
      iterator.write32(data.defaultSampleFlags);
    }
    return iterator.buffer;
  };

}).call(this);
