// Generated by CoffeeScript 1.12.2
(function() {
  var Buffers, Decoder, stream, tools,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  stream = require('stream');

  Buffers = require('buffers');

  tools = require('./tools');

  module.exports = Decoder = (function(superClass) {
    extend(Decoder, superClass);

    function Decoder(options) {
      if (options == null) {
        options = {};
      }
      options.readableObjectMode = true;
      Decoder.__super__.constructor.call(this, options);
      this._cursor = 0;
      this._length = 0;
      this._buffer = null;
    }

    Decoder.prototype._transform = function(chunk, encoding, done) {
      if (this._buffer != null) {
        this._buffer.push(chunk);
      } else {
        this._buffer = new Buffers([chunk]);
      }
      while ((this._buffer != null) && this._cursor < this._buffer.length) {
        if (!this._readBox()) {
          break;
        }
      }
      return done();
    };

    Decoder.prototype._readBox = function() {
      var box;
      box = tools.readBox(this._cursor, this._buffer, this._length);
      if (box != null) {
        this.push(box);
        if (this._cursor + box.length < this._buffer.length) {
          this._buffer = new Buffers([this._buffer.slice(this._cursor + box.length)]);
        } else {
          this._buffer = null;
        }
        this._cursor = 0;
        this._length += box.length;
        return true;
      } else {
        return false;
      }
    };

    return Decoder;

  })(stream.Transform);

}).call(this);
