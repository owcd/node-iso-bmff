// Generated by CoffeeScript 1.12.2
(function() {
  var BufferIterator, Long, btyp, readBox;

  btyp = require('./btyp');

  Long = require('long');

  BufferIterator = require('./bufferIterator');

  module.exports.readBox = readBox = function(cursor, buffer, offset) {
    var data, decode, length, slice, type;
    if (cursor + 8 < buffer.length) {
      slice = buffer.slice(cursor, cursor + 8);
      length = slice.readUInt32BE(0);
      type = slice.toString('utf8', 4);
      if (cursor + length <= buffer.length) {
        decode = btyp[type] != null ? btyp[type].decode : btyp["default"].decode;
        slice = buffer.slice(cursor + 8, cursor + length);
        data = decode(slice, cursor + offset + 8);
        return {
          type: type,
          start: cursor + offset,
          end: cursor + offset + length,
          length: length,
          data: data
        };
      } else {
        return null;
      }
    } else {
      return null;
    }
  };

  module.exports.readBoxes = function(cursor, buffer, offset) {
    var box, boxes;
    boxes = [];
    while (cursor < buffer.length) {
      box = readBox(cursor, buffer, offset);
      if (box) {
        boxes.push(box);
        cursor += box.length;
      } else {
        break;
      }
    }
    return boxes;
  };

  module.exports.initBoxData = function(iterator, flags) {
    var data, flag, info, key;
    if (flags == null) {
      flags = {};
    }
    data = {};
    info = iterator.read32();
    data.version = info >> 24;
    data.flags = info & 0x00FFFFFF;
    for (key in flags) {
      flag = flags[key];
      data[key] = (data.flags & flag) === flag;
    }
    return data;
  };

  module.exports.writeBox = function(box) {
    var data, encode, header;
    encode = btyp[box.type] != null ? btyp[box.type].encode : btyp["default"].encode;
    data = encode(box.data);
    if (false && !data.equals(box.raw)) {
      console.log('output of box', box.type, 'differs from its input');
      console.log(box.raw.toString('hex'), '=>', data.toString('hex'));
    }
    header = new Buffer(8);
    header.writeUInt32BE(data.length + 8, 0);
    header.write(box.type, 4, 4);
    return Buffer.concat([header, data]);
  };

  module.exports.writeBoxData = function(data, length, flags) {
    var buffer, flag, iterator, key;
    if (length == null) {
      length = 0;
    }
    if (flags == null) {
      flags = {};
    }
    length = 4 + length;
    buffer = new Buffer(length);
    buffer.fill(0);
    iterator = new BufferIterator(buffer);
    for (key in flags) {
      flag = flags[key];
      if ((data[key] != null) && data[key]) {
        data.flags |= flag;
      } else {
        data.flags -= data.flags & flag;
      }
    }
    iterator.write32((data.version << 24) + data.flags);
    return iterator;
  };

  module.exports.children = function(box, type) {
    var b, children, i, len, ref;
    children = [];
    ref = box.data;
    for (i = 0, len = ref.length; i < len; i++) {
      b = ref[i];
      if (b.type === type) {
        children.push(b);
      }
    }
    return children;
  };

  module.exports.child = function(box, type) {
    var b, i, len, ref;
    ref = box.data;
    for (i = 0, len = ref.length; i < len; i++) {
      b = ref[i];
      if (b.type === type) {
        return b;
      }
    }
    return null;
  };

}).call(this);
